//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MathClientConsole.MathService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tuple", Namespace="http://schemas.datacontract.org/2004/07/MathService")]
    [System.SerializableAttribute()]
    public partial class Tuple : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinearSystem", Namespace="http://schemas.datacontract.org/2004/07/MathService")]
    [System.SerializableAttribute()]
    public partial class LinearSystem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[][] CoefficientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] ConstantsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[][] _coefficientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] _constantsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[][] Coefficients {
            get {
                return this.CoefficientsField;
            }
            set {
                if ((object.ReferenceEquals(this.CoefficientsField, value) != true)) {
                    this.CoefficientsField = value;
                    this.RaisePropertyChanged("Coefficients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Constants {
            get {
                return this.ConstantsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConstantsField, value) != true)) {
                    this.ConstantsField = value;
                    this.RaisePropertyChanged("Constants");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[][] _coefficients {
            get {
                return this._coefficientsField;
            }
            set {
                if ((object.ReferenceEquals(this._coefficientsField, value) != true)) {
                    this._coefficientsField = value;
                    this.RaisePropertyChanged("_coefficients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] _constants {
            get {
                return this._constantsField;
            }
            set {
                if ((object.ReferenceEquals(this._constantsField, value) != true)) {
                    this._constantsField = value;
                    this.RaisePropertyChanged("_constants");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathService.IMath")]
    public interface IMath {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Prime", ReplyAction="http://tempuri.org/IMath/PrimeResponse")]
        bool Prime(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Prime", ReplyAction="http://tempuri.org/IMath/PrimeResponse")]
        System.Threading.Tasks.Task<bool> PrimeAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/SumTuple", ReplyAction="http://tempuri.org/IMath/SumTupleResponse")]
        MathClientConsole.MathService.Tuple SumTuple(MathClientConsole.MathService.Tuple tuple);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/SumTuple", ReplyAction="http://tempuri.org/IMath/SumTupleResponse")]
        System.Threading.Tasks.Task<MathClientConsole.MathService.Tuple> SumTupleAsync(MathClientConsole.MathService.Tuple tuple);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/SolveLinearSystem", ReplyAction="http://tempuri.org/IMath/SolveLinearSystemResponse")]
        double[] SolveLinearSystem(MathClientConsole.MathService.LinearSystem system);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/SolveLinearSystem", ReplyAction="http://tempuri.org/IMath/SolveLinearSystemResponse")]
        System.Threading.Tasks.Task<double[]> SolveLinearSystemAsync(MathClientConsole.MathService.LinearSystem system);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathChannel : MathClientConsole.MathService.IMath, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathClient : System.ServiceModel.ClientBase<MathClientConsole.MathService.IMath>, MathClientConsole.MathService.IMath {
        
        public MathClient() {
        }
        
        public MathClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Prime(int value) {
            return base.Channel.Prime(value);
        }
        
        public System.Threading.Tasks.Task<bool> PrimeAsync(int value) {
            return base.Channel.PrimeAsync(value);
        }
        
        public MathClientConsole.MathService.Tuple SumTuple(MathClientConsole.MathService.Tuple tuple) {
            return base.Channel.SumTuple(tuple);
        }
        
        public System.Threading.Tasks.Task<MathClientConsole.MathService.Tuple> SumTupleAsync(MathClientConsole.MathService.Tuple tuple) {
            return base.Channel.SumTupleAsync(tuple);
        }
        
        public double[] SolveLinearSystem(MathClientConsole.MathService.LinearSystem system) {
            return base.Channel.SolveLinearSystem(system);
        }
        
        public System.Threading.Tasks.Task<double[]> SolveLinearSystemAsync(MathClientConsole.MathService.LinearSystem system) {
            return base.Channel.SolveLinearSystemAsync(system);
        }
    }
}
